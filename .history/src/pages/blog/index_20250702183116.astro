---
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHeader from "../../components/Sections/PageHeader.astro";
import Card from "../../components/UI/Card.astro";
import { getCollection } from "astro:content";
import { formatDate } from "../../utils/dateUtils";

// Get all blog posts
const allPosts = await getCollection("blog", ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Sort by date (newest first)
const posts = allPosts.sort((a, b) =>
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

// Get unique tags for filters
const tags = [...new Set(posts.flatMap(post => post.data.tags))];
---

<BaseLayout
  title="Blog - BOLGPC"
  description="Read our latest articles, devotionals, and updates from our church community."
>
  <PageHeader 
    title="Blog" 
    subtitle="Insights, devotionals, and updates from our church community"
    backgroundImage="/uploads/blog-header-bg.webp"
  />
  
  <section class="py-16">
    <div class="container mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        
        <!-- Filters Sidebar -->
        <aside class="lg:col-span-1">
          <div class="bg-white p-6 rounded-lg shadow sticky top-24">
            <h2 class="text-xl font-bold mb-6">Filter Posts</h2>
            
            <!-- Search -->
            <div class="mb-6">
              <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
              <input 
                type="text" 
                id="search" 
                placeholder="Search posts..." 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
            
            <!-- Tags Filter -->
            {tags.length > 0 && (
              <div class="mb-6">
                <h3 class="text-sm font-medium text-gray-700 mb-2">Tags</h3>
                <div class="space-y-2">
                  {tags.map(tag => (
                    <label class="flex items-center">
                      <input 
                        type="checkbox" 
                        class="tag-checkbox h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" 
                        value={tag} 
                      />
                      <span class="ml-2 text-gray-700">{tag}</span>
                    </label>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Author Filter -->
            <div class="mb-6">
              <label for="author" class="block text-sm font-medium text-gray-700 mb-1">Author</label>
              <input 
                type="text" 
                id="author" 
                placeholder="Filter by author..." 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
            
            <!-- Date Range Filter -->
            <div class="space-y-3 mb-6">
              <label class="block text-sm font-medium text-gray-700">Date Range</label>
              <div>
                <label for="from-date" class="block text-xs text-gray-500 mb-1">From</label>
                <input 
                  type="date" 
                  id="from-date" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              <div>
                <label for="to-date" class="block text-xs text-gray-500 mb-1">To</label>
                <input 
                  type="date" 
                  id="to-date" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
            </div>
            
            <!-- Reset Filters Button -->
            <button 
              id="reset-filters"
              class="w-full py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
            >
              Reset Filters
            </button>
          </div>
        </aside>
        
        <!-- Blog Posts Grid -->
        <main class="lg:col-span-3">
          <h2 class="text-2xl font-bold mb-6">All Posts</h2>
          
          <div id="posts-grid" class="grid grid-cols-1 md:grid-cols-2 gap-8">
            {posts.map(post => (
              <Card
                title={post.data.title}
                image={post.data.image && {
                  src: post.data.image.url,
                  alt: post.data.image.alt
                }}
                href={`/blog/${post.slug}`}
                class="blog-card"
                data-title={post.data.title}
                data-desc={post.data.description}
                data-tags={post.data.tags.join(',')}
                data-author={post.data.author}
                data-date={post.data.pubDate.toISOString().slice(0, 10)}
              >
                <div class="mb-3 flex items-center text-gray-600">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span>{formatDate(post.data.pubDate)}</span>
                </div>
                
                <div class="mb-3 flex items-center text-gray-600">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span>{post.data.author}</span>
                </div>
                
                <p class="text-gray-700 mb-4">{post.data.description}</p>
                {post.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2 mb-4">
                    {post.data.tags.map(tag => (
                      <span class="px-2 py-1 text-xs font-medium text-primary-700 bg-primary-100 rounded-full">{tag}</span>
                    ))}
                  </div>
                )}
                <a href={`/blog/${post.slug}`} class="text-primary-600 font-medium hover:text-primary-700">
                  Read More →
                </a>
              </Card>
            ))}
          </div>
          
          <!-- No Results Message -->
          <div id="no-results" class="hidden text-center py-12 bg-gray-50 rounded-lg mt-8">
            <p class="text-gray-600">No posts match your search criteria. Please try different filters.</p>
          </div>
        </main>
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput   = document.getElementById('search');
      const authorInput   = document.getElementById('author');
      const tagCheckboxes = Array.from(document.querySelectorAll('.tag-checkbox'));
      const fromDateInput = document.getElementById('from-date');
      const toDateInput   = document.getElementById('to-date');
      const resetButton   = document.getElementById('reset-filters');
      const blogCards     = Array.from(document.querySelectorAll('.blog-card'));
      const noResults     = document.getElementById('no-results');

      const filterPosts = () => {
        const term    = searchInput.value.trim().toLowerCase();
        const author  = authorInput.value.trim().toLowerCase();
        const from    = fromDateInput.value ? new Date(fromDateInput.value) : null;
        const to      = toDateInput.value   ? new Date(toDateInput.value)   : null;
        const tagsSel = tagCheckboxes.filter(cb => cb.checked).map(cb => cb.value);

        let visible = 0;

        blogCards.forEach(card => {
          const title    = card.dataset.title.toLowerCase();
          const desc     = card.dataset.desc.toLowerCase();
          const cardAuth = card.dataset.author.toLowerCase();
          const cardDate = new Date(card.dataset.date);
          const cardTags = card.dataset.tags.split(',');

          const okSearch  = !term   || title.includes(term) || desc.includes(term);
          const okAuthor  = !author || cardAuth.includes(author);
          const okFrom    = !from   || cardDate >= from;
          const okTo      = !to     || cardDate <= to;
          const okTags    = tagsSel.length === 0 || tagsSel.some(t => cardTags.includes(t));

          const show = okSearch && okAuthor && okFrom && okTo && okTags;
          card.style.display = show ? '' : 'none';
          if (show) visible++;
        });

        noResults.style.display = visible === 0 ? 'block' : 'none';
      };

      // 绑定事件
      [searchInput, authorInput, fromDateInput, toDateInput].forEach(el => {
        el.addEventListener('input', filterPosts);
        el.addEventListener('change', filterPosts);
      });
      tagCheckboxes.forEach(cb => cb.addEventListener('change', filterPosts));
      resetButton.addEventListener('click', () => {
        searchInput.value = '';
        authorInput.value = '';
        fromDateInput.value = '';
        toDateInput.value   = '';
        tagCheckboxes.forEach(cb => cb.checked = false);
        filterPosts();
      });

      // 首次运行
      filterPosts();
    });
  </script>
</BaseLayout>
