---
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHeader from "../../components/Sections/PageHeader.astro";
import Card from "../../components/UI/Card.astro";
import { getCollection } from "astro:content";
import { formatDate } from "../../utils/dateUtils";

// Get all sermons
const allSermons = await getCollection("sermons", ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Sort by date (newest first)
const sermons = allSermons.sort((a, b) =>
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get unique series and speakers for filters
const series = [...new Set(sermons.map(s => s.data.series).filter(Boolean))];
const speakers = [...new Set(sermons.map(s => s.data.speaker))];
---

<BaseLayout
  title="Sermons - Church Name"
  description="Listen to or watch our latest sermons. Explore our sermon archive to grow in your faith and understanding of God's Word."
>
  <PageHeader 
    title="Sermons" 
    subtitle="Listen to or watch our latest messages"
    backgroundImage="/uploads/sermons-header-bg.webp"
  />
  
  <section class="py-16">
    <div class="container">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        
        <!-- Filters Sidebar -->
        <div class="lg:col-span-1">
          <div class="bg-white p-6 rounded-lg shadow-sm sticky top-24">
            <h2 class="text-xl font-bold mb-6">Filter Sermons</h2>
            
            <!-- Search -->
            <div class="mb-6">
              <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
              <input 
                type="text" 
                id="search" 
                placeholder="Search sermons..." 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
            
            <!-- Series Filter -->
            {series.length > 0 && (
              <div class="mb-6">
                <label for="series" class="block text-sm font-medium text-gray-700 mb-1">Series</label>
                <select id="series" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                  <option value="">All Series</option>
                  {series.map(s => <option value={s}>{s}</option>)}
                </select>
              </div>
            )}
            
            <!-- Speaker Filter -->
            {speakers.length > 0 && (
              <div class="mb-6">
                <label for="speaker" class="block text-sm font-medium text-gray-700 mb-1">Speaker</label>
                <select id="speaker" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
                  <option value="">All Speakers</option>
                  {speakers.map(s => <option value={s}>{s}</option>)}
                </select>
              </div>
            )}
            
            <!-- Date Range Filter -->
            <div class="space-y-3">
              <label class="block text-sm font-medium text-gray-700">Date Range</label>
              <div>
                <label for="from-date" class="block text-xs text-gray-500 mb-1">From</label>
                <input type="date" id="from-date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500" />
              </div>
              <div>
                <label for="to-date" class="block text-xs text-gray-500 mb-1">To</label>
                <input type="date" id="to-date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500" />
              </div>
            </div>
            
            <!-- Reset Filters -->
            <button id="reset-filters" class="w-full mt-6 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
              Reset Filters
            </button>
          </div>
        </div>
        
        <!-- Sermons Grid -->
        <div class="lg:col-span-3">
          <h2 class="text-2xl font-bold mb-6">All Sermons</h2>
          <div id="sermons-grid" class="grid grid-cols-1 md:grid-cols-2 gap-8">
            {sermons.map(sermon => (
              <Card
                title={sermon.data.title}
                image={{
                  src: sermon.data.image || "/uploads/sermon-placeholder.webp",
                  alt: sermon.data.title
                }}
                href={`/sermons/${sermon.slug}`}
                class="sermon-card"
                data-series={sermon.data.series || ""}
                data-speaker={sermon.data.speaker}
                data-date={sermon.data.date.toISOString().slice(0, 10)}
              >
                <div class="mb-3 flex items-center text-gray-600">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span>{formatDate(sermon.data.date)}</span>
                </div>
                <div class="mb-3 flex items-center text-gray-600">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span>{sermon.data.speaker}</span>
                </div>
                {sermon.data.series && (
                  <div class="mb-3 flex items-center text-gray-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                    <span>Series: {sermon.data.series}</span>
                  </div>
                )}
                {sermon.data.scripture && (
                  <div class="mb-3 flex items-center text-gray-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                    </svg>
                    <span>{sermon.data.scripture}</span>
                  </div>
                )}
                <p class="text-gray-700 mb-4">{sermon.data.summary}</p>
                <a href={`/sermons/${sermon.slug}`} class="text-primary-600 font-medium hover:text-primary-700">
                  Listen/Watch â†’
                </a>
              </Card>
            ))}
          </div>
          
          <!-- No Results Message -->
          <div id="no-results" class="hidden text-center py-12 bg-gray-50 rounded-lg mt-8">
            <p class="text-gray-600">No sermons match your search criteria. Please try different filters.</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput   = document.getElementById('search');
      const seriesSelect  = document.getElementById('series');
      const speakerSelect = document.getElementById('speaker');
      const fromDateInput = document.getElementById('from-date');
      const toDateInput   = document.getElementById('to-date');
      const resetButton   = document.getElementById('reset-filters');
      const sermonCards   = Array.from(document.querySelectorAll('.sermon-card'));
      const noResults     = document.getElementById('no-results');

      const filterSermons = () => {
        const term   = searchInput.value.trim().toLowerCase();
        const series = seriesSelect.value;
        const speaker= speakerSelect.value;
        const from   = fromDateInput.value ? new Date(fromDateInput.value) : null;
        const to     = toDateInput.value   ? new Date(toDateInput.value)   : null;
        let visible  = 0;

        sermonCards.forEach(card => {
          const text     = card.textContent.toLowerCase();
          const ser      = card.dataset.series || "";
          const spk      = card.dataset.speaker || "";
          const date     = new Date(card.dataset.date);

          const okSearch  = !term || text.includes(term);
          const okSeries  = !series    || ser === series;
          const okSpeaker = !speaker   || spk === speaker;
          const okFrom    = !from      || date >= from;
          const okTo      = !to        || date <= to;

          const show = okSearch && okSeries && okSpeaker && okFrom && okTo;
          card.style.display = show ? "" : "none";
          if (show) visible++;
        });

        if (visible > 0) {
          noResults.classList.add('hidden');
        } else {
          noResults.classList.remove('hidden');
        }
      };

      // Wire up events
      [searchInput, seriesSelect, speakerSelect, fromDateInput, toDateInput].forEach(el => {
        el.addEventListener('input', filterSermons);
        el.addEventListener('change', filterSermons);
      });

      resetButton.addEventListener('click', () => {
        searchInput.value = "";
        seriesSelect.value = "";
        speakerSelect.value = "";
        fromDateInput.value = "";
        toDateInput.value = "";
        filterSermons();
      });

      // Initial run
      filterSermons();
    });
  </script>
</BaseLayout>

